name: Azad Hall Website CI/CD

on:
  pull_request:
    branches: [ main, dev]
  push:
    branches: [ main, dev]

env:
  IMAGE_NAME: azad-hall-website

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Create .env file safely and verify it exists
    - name: Create .env file
      run: |
        cat << 'EOF' > .env
        # Django Secret
        SECRET_KEY="${{ secrets.SECRET_KEY }}"
        # Postgres
        DATABASE="${{ secrets.DATABASE }}"
        DB_ENGINE=django.db.backends.postgresql_psycopg2
        DB_HOST=${{ secrets.DB_HOST }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_PORT=${{ secrets.DB_PORT }}
        # Google Login
        CLIENT_ID=${{ secrets.CLIENT_ID }}
        SECRET=${{ secrets.GOOGLE_SECRET }}
        EOF
        
        # Verify .env file was created
        ls -la .env
        echo "ENV file created successfully"

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        outputs: type=docker,dest=/tmp/docker-image.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Verify artifacts before upload
    - name: Verify artifacts
      run: |
        ls -la /tmp/docker-image.tar
        ls -la .env

    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: /tmp/docker-image.tar
        retention-days: 1
        if-no-files-found: error

  test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Create test env file
      run: |
        cat << 'EOF' > .env
        # Django Secret
        SECRET_KEY="${{ secrets.SECRET_KEY }}"
        # Postgres
        DATABASE="${{ secrets.DATABASE }}"
        DB_ENGINE=django.db.backends.postgresql_psycopg2
        DB_HOST=${{ secrets.DB_HOST }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_PORT=${{ secrets.DB_PORT }}
        # Google Login
        CLIENT_ID=${{ secrets.CLIENT_ID }}
        SECRET=${{ secrets.GOOGLE_SECRET }}
        EOF

    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/docker-image.tar

    - name: Start the application
      run: |
        docker run -d \
          --name azad-website \
          -p 10000:10000 \
          --env-file .env \
          ${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Wait for application to start
      run: |
        echo "Waiting for application to start..."
        sleep 20

    - name: Check if website is accessible
      run: |
        for i in {1..30}; do
          if curl -s -f http://localhost:10000 > /dev/null; then
            echo "Website is up and running!"
            exit 0
          fi
          echo "Attempt $i: Website not ready yet..."
          sleep 2
        done
        echo "Website failed to start"
        docker logs azad-website
        exit 1

    - name: Clean up
      if: always()
      run: |
        docker stop azad-website || true
        docker rm azad-website || true